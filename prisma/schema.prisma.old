datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  street     String   @db.VarChar(255)
  zipCode    String   @db.Char(8)
  number     String   @db.VarChar(7)
  complement String?  @db.VarChar(127)
  district   String   @db.VarChar(127)
  cityId     Int
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @db.Timestamp(0)
  city       City     @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "addresses_ibfk_1")

  @@index([cityId], map: "cityId")
  @@map("addresses")
}

model Branche {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(45)
  stateId     Int     @db.UnsignedInt
  users_total Int?
  states      State  @relation(fields: [stateId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_branches_states")
  User        User[]

  @@index([stateId], map: "FK_branches_states")
  @@map("branches")
}

model City {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(31)
  stateId   Int         @db.UnsignedInt
  createdAt DateTime    @default(now()) @db.Timestamp(0)
  updatedAt DateTime    @default(now()) @db.Timestamp(0)
  state     State      @relation(fields: [stateId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_cities_states")
  Address   Address[]

  @@index([stateId], map: "FK_cities_states")
  @@map("cities")
}

model Coin {
  id        Int         @id @default(autoincrement()) @db.UnsignedInt
  name      String      @db.VarChar(63)
  code      String      @db.Char(3)
  createdAt DateTime    @default(now()) @db.Timestamp(0)
  updatedAt DateTime    @default(now()) @db.Timestamp(0)
  Employee  Employee[]

  @@map("coins")
}

model Employee {
  id             Int              @id @default(autoincrement())
  personId       Int              @db.UnsignedInt
  salary         Decimal          @db.Decimal(10, 2)
  totalSales     Int?
  coinId         Int              @default(1) @db.UnsignedInt
  ruleId         Int              @db.UnsignedInt
  startAt        DateTime         @db.Date
  endAt          DateTime?        @db.Date
  cpf            String           @db.Char(11)
  phone          String           @db.Char(13)
  birthAt        DateTime         @db.Date
  yearsOld       Int              @db.TinyInt
  createdAt      DateTime         @default(now()) @db.Timestamp(0)
  updatedAt      DateTime         @default(now()) @db.Timestamp(0)
  coin           Coin             @relation(fields: [coinId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_1")
  person         Person           @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_employees_people")
  rule           Rule             @relation(fields: [ruleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_2")
  EmployeeSale   EmployeeSale[]

  @@index([personId], map: "FK_employees_people")
  @@index([coinId], map: "coinId")
  @@index([ruleId], map: "ruleId")
  @@map("employees")
}

model EmployeeSale {
  employeeId Int
  saleId     Int       @unique(map: "saleId")
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_employeessales_employees")
  sale       Sale      @relation(fields: [saleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_employeessales_sales")

  @@id([employeeId, saleId])
  @@map("employeessales")
}

model Movie {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(200)
  categoryId       Int
  movieCategory    MovieCategory @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_movies_moviescategories")

  @@index([categoryId], map: "FK_movies_moviescategories")
  @@map("movies")
}

model MovieCategory {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(256)
  Movie  Movie[]
  @@map("moviescategories")
}

model Person {
  id        Int         @id @default(autoincrement()) @db.UnsignedInt
  name      String      @db.VarChar(45)
  createdAt DateTime    @default(now()) @db.Timestamp(0)
  updatedAt DateTime    @default(now()) @db.Timestamp(0)
  Employee  Employee[]
  User      User[]

  @@map("people")
}

model Permission {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(45)
  description      String?            @db.VarChar(45)
  createdAt        DateTime           @default(now()) @db.Timestamp(0)
  updatedAt        DateTime           @default(now()) @db.Timestamp(0)
  UserPermission   UserPermission[]
  @@map("permissions")
}

model Rule {
  id        Int         @id @default(autoincrement()) @db.UnsignedInt
  name      String      @db.VarChar(127)
  createdAt DateTime    @default(now()) @db.Timestamp(0)
  updatedAt DateTime    @default(now()) @db.Timestamp(0)
  Employee  Employee[]
  @@map("rules")
}

model Sale {
  id             Int             @id @default(autoincrement())
  description    String          @db.VarChar(256)
  amount         Decimal         @db.Decimal(10, 2)
  createdAt      DateTime        @default(now()) @db.Timestamp(0)
  updatedAt      DateTime        @default(now()) @db.Timestamp(0)
  employeeSale   EmployeeSale?
  @@map("sales")
}

model State {
  id        Int        @id @default(autoincrement()) @db.UnsignedInt
  name      String     @db.VarChar(31)
  uf        String?    @db.Char(2)
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  updatedAt DateTime   @default(now()) @db.Timestamp(0)
  Branche   Branche[]
  City      City[]
  @@map("states")
}

model User {
  id               Int                @id @default(autoincrement())
  personId         Int                @db.UnsignedInt
  branchId         Int?
  email            String             @unique(map: "email") @db.VarChar(45)
  password         String             @db.VarChar(45)
  createdAt        DateTime           @default(now()) @db.Timestamp(0)
  updatedAt        DateTime           @default(now()) @db.Timestamp(0)
  branche          Branche?          @relation(fields: [branchId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_users_branches")
  person           Person             @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_users_people")
  UserPermission   UserPermission[]

  @@index([branchId], map: "FK_users_branches")
  @@index([personId], map: "FK_users_people")
  @@map("users")
}

model UserPermission {
  userId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_userspermissions_permissions")
  user         User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_userspermissions_users")

  @@id([userId, permissionId])
  @@index([permissionId], map: "FK_userspermissions_permissions")
  @@map("userspermissions")
}
